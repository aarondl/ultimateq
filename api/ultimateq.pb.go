// Code generated by protoc-gen-go.
// source: ultimateq.proto
// DO NOT EDIT!

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SelfResponse struct {
	User  *SimpleUser   `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Modes *ChannelModes `protobuf:"bytes,2,opt,name=modes" json:"modes,omitempty"`
}

func (m *SelfResponse) Reset()                    { *m = SelfResponse{} }
func (m *SelfResponse) String() string            { return proto.CompactTextString(m) }
func (*SelfResponse) ProtoMessage()               {}
func (*SelfResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SelfResponse) GetUser() *SimpleUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *SelfResponse) GetModes() *ChannelModes {
	if m != nil {
		return m.Modes
	}
	return nil
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type Query struct {
	Query string `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type NetworkQuery struct {
	Network string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Query   string `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *NetworkQuery) Reset()                    { *m = NetworkQuery{} }
func (m *NetworkQuery) String() string            { return proto.CompactTextString(m) }
func (*NetworkQuery) ProtoMessage()               {}
func (*NetworkQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type ChannelQuery struct {
	Network string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Channel string `protobuf:"bytes,2,opt,name=channel" json:"channel,omitempty"`
	Query   string `protobuf:"bytes,3,opt,name=query" json:"query,omitempty"`
}

func (m *ChannelQuery) Reset()                    { *m = ChannelQuery{} }
func (m *ChannelQuery) String() string            { return proto.CompactTextString(m) }
func (*ChannelQuery) ProtoMessage()               {}
func (*ChannelQuery) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

type ListResponse struct {
	List []string `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *ListResponse) Reset()                    { *m = ListResponse{} }
func (m *ListResponse) String() string            { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()               {}
func (*ListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

type CountResponse struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *CountResponse) Reset()                    { *m = CountResponse{} }
func (m *CountResponse) String() string            { return proto.CompactTextString(m) }
func (*CountResponse) ProtoMessage()               {}
func (*CountResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

type Result struct {
	// Types that are valid to be assigned to Result:
	//	*Result_Ok
	//	*Result_NotFound_
	Result isResult_Result `protobuf_oneof:"result"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

type isResult_Result interface {
	isResult_Result()
}

type Result_Ok struct {
	Ok *Result_OK `protobuf:"bytes,1,opt,name=ok,oneof"`
}
type Result_NotFound_ struct {
	NotFound *Result_NotFound `protobuf:"bytes,2,opt,name=not_found,json=notFound,oneof"`
}

func (*Result_Ok) isResult_Result()        {}
func (*Result_NotFound_) isResult_Result() {}

func (m *Result) GetResult() isResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Result) GetOk() *Result_OK {
	if x, ok := m.GetResult().(*Result_Ok); ok {
		return x.Ok
	}
	return nil
}

func (m *Result) GetNotFound() *Result_NotFound {
	if x, ok := m.GetResult().(*Result_NotFound_); ok {
		return x.NotFound
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Result) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Result_OneofMarshaler, _Result_OneofUnmarshaler, _Result_OneofSizer, []interface{}{
		(*Result_Ok)(nil),
		(*Result_NotFound_)(nil),
	}
}

func _Result_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Result)
	// result
	switch x := m.Result.(type) {
	case *Result_Ok:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ok); err != nil {
			return err
		}
	case *Result_NotFound_:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotFound); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Result.Result has unexpected type %T", x)
	}
	return nil
}

func _Result_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Result)
	switch tag {
	case 1: // result.ok
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Result_OK)
		err := b.DecodeMessage(msg)
		m.Result = &Result_Ok{msg}
		return true, err
	case 2: // result.not_found
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Result_NotFound)
		err := b.DecodeMessage(msg)
		m.Result = &Result_NotFound_{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Result_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Result)
	// result
	switch x := m.Result.(type) {
	case *Result_Ok:
		s := proto.Size(x.Ok)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Result_NotFound_:
		s := proto.Size(x.NotFound)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Result_OK struct {
}

func (m *Result_OK) Reset()                    { *m = Result_OK{} }
func (m *Result_OK) String() string            { return proto.CompactTextString(m) }
func (*Result_OK) ProtoMessage()               {}
func (*Result_OK) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 0} }

type Result_NotFound struct {
}

func (m *Result_NotFound) Reset()                    { *m = Result_NotFound{} }
func (m *Result_NotFound) String() string            { return proto.CompactTextString(m) }
func (*Result_NotFound) ProtoMessage()               {}
func (*Result_NotFound) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7, 1} }

type RegisterRequest struct {
	Name     string     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Handlers []*Handler `protobuf:"bytes,2,rep,name=handlers" json:"handlers,omitempty"`
	Cmds     []*Command `protobuf:"bytes,3,rep,name=cmds" json:"cmds,omitempty"`
}

func (m *RegisterRequest) Reset()                    { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()               {}
func (*RegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *RegisterRequest) GetHandlers() []*Handler {
	if m != nil {
		return m.Handlers
	}
	return nil
}

func (m *RegisterRequest) GetCmds() []*Command {
	if m != nil {
		return m.Cmds
	}
	return nil
}

type UnregisterRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *UnregisterRequest) Reset()                    { *m = UnregisterRequest{} }
func (m *UnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*UnregisterRequest) ProtoMessage()               {}
func (*UnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

type UserResponse struct {
	Self *SimpleUser `protobuf:"bytes,1,opt,name=self" json:"self,omitempty"`
}

func (m *UserResponse) Reset()                    { *m = UserResponse{} }
func (m *UserResponse) String() string            { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()               {}
func (*UserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{10} }

func (m *UserResponse) GetSelf() *SimpleUser {
	if m != nil {
		return m.Self
	}
	return nil
}

type UserModesResponse struct {
	Modes *ChannelModes `protobuf:"bytes,1,opt,name=modes" json:"modes,omitempty"`
}

func (m *UserModesResponse) Reset()                    { *m = UserModesResponse{} }
func (m *UserModesResponse) String() string            { return proto.CompactTextString(m) }
func (*UserModesResponse) ProtoMessage()               {}
func (*UserModesResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{11} }

func (m *UserModesResponse) GetModes() *ChannelModes {
	if m != nil {
		return m.Modes
	}
	return nil
}

type ChannelResponse struct {
	Name  string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Topic string        `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
	Modes *ChannelModes `protobuf:"bytes,3,opt,name=modes" json:"modes,omitempty"`
}

func (m *ChannelResponse) Reset()                    { *m = ChannelResponse{} }
func (m *ChannelResponse) String() string            { return proto.CompactTextString(m) }
func (*ChannelResponse) ProtoMessage()               {}
func (*ChannelResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{12} }

func (m *ChannelResponse) GetModes() *ChannelModes {
	if m != nil {
		return m.Modes
	}
	return nil
}

type StoredUsersResponse struct {
	Users []*StoredUser `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *StoredUsersResponse) Reset()                    { *m = StoredUsersResponse{} }
func (m *StoredUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*StoredUsersResponse) ProtoMessage()               {}
func (*StoredUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{13} }

func (m *StoredUsersResponse) GetUsers() []*StoredUser {
	if m != nil {
		return m.Users
	}
	return nil
}

type StoredChannelsResponse struct {
	Channels []*StoredChannel `protobuf:"bytes,1,rep,name=channels" json:"channels,omitempty"`
}

func (m *StoredChannelsResponse) Reset()                    { *m = StoredChannelsResponse{} }
func (m *StoredChannelsResponse) String() string            { return proto.CompactTextString(m) }
func (*StoredChannelsResponse) ProtoMessage()               {}
func (*StoredChannelsResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{14} }

func (m *StoredChannelsResponse) GetChannels() []*StoredChannel {
	if m != nil {
		return m.Channels
	}
	return nil
}

type LogoutRequest struct {
	// Types that are valid to be assigned to Query:
	//	*LogoutRequest_HostUser_
	//	*LogoutRequest_Username
	Query isLogoutRequest_Query `protobuf_oneof:"query"`
}

func (m *LogoutRequest) Reset()                    { *m = LogoutRequest{} }
func (m *LogoutRequest) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest) ProtoMessage()               {}
func (*LogoutRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15} }

type isLogoutRequest_Query interface {
	isLogoutRequest_Query()
}

type LogoutRequest_HostUser_ struct {
	HostUser *LogoutRequest_HostUser `protobuf:"bytes,1,opt,name=host_user,json=hostUser,oneof"`
}
type LogoutRequest_Username struct {
	Username string `protobuf:"bytes,2,opt,name=username,oneof"`
}

func (*LogoutRequest_HostUser_) isLogoutRequest_Query() {}
func (*LogoutRequest_Username) isLogoutRequest_Query()  {}

func (m *LogoutRequest) GetQuery() isLogoutRequest_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *LogoutRequest) GetHostUser() *LogoutRequest_HostUser {
	if x, ok := m.GetQuery().(*LogoutRequest_HostUser_); ok {
		return x.HostUser
	}
	return nil
}

func (m *LogoutRequest) GetUsername() string {
	if x, ok := m.GetQuery().(*LogoutRequest_Username); ok {
		return x.Username
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*LogoutRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _LogoutRequest_OneofMarshaler, _LogoutRequest_OneofUnmarshaler, _LogoutRequest_OneofSizer, []interface{}{
		(*LogoutRequest_HostUser_)(nil),
		(*LogoutRequest_Username)(nil),
	}
}

func _LogoutRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*LogoutRequest)
	// query
	switch x := m.Query.(type) {
	case *LogoutRequest_HostUser_:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.HostUser); err != nil {
			return err
		}
	case *LogoutRequest_Username:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Username)
	case nil:
	default:
		return fmt.Errorf("LogoutRequest.Query has unexpected type %T", x)
	}
	return nil
}

func _LogoutRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*LogoutRequest)
	switch tag {
	case 1: // query.host_user
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(LogoutRequest_HostUser)
		err := b.DecodeMessage(msg)
		m.Query = &LogoutRequest_HostUser_{msg}
		return true, err
	case 2: // query.username
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Query = &LogoutRequest_Username{x}
		return true, err
	default:
		return false, nil
	}
}

func _LogoutRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*LogoutRequest)
	// query
	switch x := m.Query.(type) {
	case *LogoutRequest_HostUser_:
		s := proto.Size(x.HostUser)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *LogoutRequest_Username:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Username)))
		n += len(x.Username)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type LogoutRequest_HostUser struct {
	Network string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Host    string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
}

func (m *LogoutRequest_HostUser) Reset()                    { *m = LogoutRequest_HostUser{} }
func (m *LogoutRequest_HostUser) String() string            { return proto.CompactTextString(m) }
func (*LogoutRequest_HostUser) ProtoMessage()               {}
func (*LogoutRequest_HostUser) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{15, 0} }

type IRCMessage struct {
	Name      string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Sender    string   `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Args      []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	Date      int64    `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	NetworkId string   `protobuf:"bytes,5,opt,name=network_id,json=networkId" json:"network_id,omitempty"`
}

func (m *IRCMessage) Reset()                    { *m = IRCMessage{} }
func (m *IRCMessage) String() string            { return proto.CompactTextString(m) }
func (*IRCMessage) ProtoMessage()               {}
func (*IRCMessage) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{16} }

type NetworkInfo struct {
	ServerName  string            `protobuf:"bytes,1,opt,name=server_name,json=serverName" json:"server_name,omitempty"`
	IrcdVersion string            `protobuf:"bytes,2,opt,name=ircd_version,json=ircdVersion" json:"ircd_version,omitempty"`
	Usermodes   string            `protobuf:"bytes,3,opt,name=usermodes" json:"usermodes,omitempty"`
	Lchanmodes  string            `protobuf:"bytes,4,opt,name=lchanmodes" json:"lchanmodes,omitempty"`
	Rfc         string            `protobuf:"bytes,5,opt,name=rfc" json:"rfc,omitempty"`
	Ircd        string            `protobuf:"bytes,6,opt,name=ircd" json:"ircd,omitempty"`
	Casemapping string            `protobuf:"bytes,7,opt,name=casemapping" json:"casemapping,omitempty"`
	Prefix      string            `protobuf:"bytes,8,opt,name=prefix" json:"prefix,omitempty"`
	Chantypes   string            `protobuf:"bytes,9,opt,name=chantypes" json:"chantypes,omitempty"`
	Chanmodes   string            `protobuf:"bytes,10,opt,name=chanmodes" json:"chanmodes,omitempty"`
	Chanlimit   int32             `protobuf:"varint,11,opt,name=chanlimit" json:"chanlimit,omitempty"`
	Channellen  int32             `protobuf:"varint,12,opt,name=channellen" json:"channellen,omitempty"`
	Nicklen     int32             `protobuf:"varint,13,opt,name=nicklen" json:"nicklen,omitempty"`
	Topiclen    int32             `protobuf:"varint,14,opt,name=topiclen" json:"topiclen,omitempty"`
	Awaylen     int32             `protobuf:"varint,15,opt,name=awaylen" json:"awaylen,omitempty"`
	Kicklen     int32             `protobuf:"varint,16,opt,name=kicklen" json:"kicklen,omitempty"`
	Modes       int32             `protobuf:"varint,17,opt,name=modes" json:"modes,omitempty"`
	Extras      map[string]string `protobuf:"bytes,18,rep,name=extras" json:"extras,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NetworkInfo) Reset()                    { *m = NetworkInfo{} }
func (m *NetworkInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfo) ProtoMessage()               {}
func (*NetworkInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{17} }

func (m *NetworkInfo) GetExtras() map[string]string {
	if m != nil {
		return m.Extras
	}
	return nil
}

type AuthUserRequest struct {
	Network   string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Host      string `protobuf:"bytes,2,opt,name=host" json:"host,omitempty"`
	Username  string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Password  string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
	Permanent bool   `protobuf:"varint,5,opt,name=permanent" json:"permanent,omitempty"`
}

func (m *AuthUserRequest) Reset()                    { *m = AuthUserRequest{} }
func (m *AuthUserRequest) String() string            { return proto.CompactTextString(m) }
func (*AuthUserRequest) ProtoMessage()               {}
func (*AuthUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{18} }

type RawIRC struct {
	Msg []byte `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RawIRC) Reset()                    { *m = RawIRC{} }
func (m *RawIRC) String() string            { return proto.CompactTextString(m) }
func (*RawIRC) ProtoMessage()               {}
func (*RawIRC) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{19} }

type ConnectionDetails struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *ConnectionDetails) Reset()                    { *m = ConnectionDetails{} }
func (m *ConnectionDetails) String() string            { return proto.CompactTextString(m) }
func (*ConnectionDetails) ProtoMessage()               {}
func (*ConnectionDetails) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{20} }

func init() {
	proto.RegisterType((*SelfResponse)(nil), "api.SelfResponse")
	proto.RegisterType((*Empty)(nil), "api.Empty")
	proto.RegisterType((*Query)(nil), "api.Query")
	proto.RegisterType((*NetworkQuery)(nil), "api.NetworkQuery")
	proto.RegisterType((*ChannelQuery)(nil), "api.ChannelQuery")
	proto.RegisterType((*ListResponse)(nil), "api.ListResponse")
	proto.RegisterType((*CountResponse)(nil), "api.CountResponse")
	proto.RegisterType((*Result)(nil), "api.Result")
	proto.RegisterType((*Result_OK)(nil), "api.Result.OK")
	proto.RegisterType((*Result_NotFound)(nil), "api.Result.NotFound")
	proto.RegisterType((*RegisterRequest)(nil), "api.RegisterRequest")
	proto.RegisterType((*UnregisterRequest)(nil), "api.UnregisterRequest")
	proto.RegisterType((*UserResponse)(nil), "api.UserResponse")
	proto.RegisterType((*UserModesResponse)(nil), "api.UserModesResponse")
	proto.RegisterType((*ChannelResponse)(nil), "api.ChannelResponse")
	proto.RegisterType((*StoredUsersResponse)(nil), "api.StoredUsersResponse")
	proto.RegisterType((*StoredChannelsResponse)(nil), "api.StoredChannelsResponse")
	proto.RegisterType((*LogoutRequest)(nil), "api.LogoutRequest")
	proto.RegisterType((*LogoutRequest_HostUser)(nil), "api.LogoutRequest.HostUser")
	proto.RegisterType((*IRCMessage)(nil), "api.IRCMessage")
	proto.RegisterType((*NetworkInfo)(nil), "api.NetworkInfo")
	proto.RegisterType((*AuthUserRequest)(nil), "api.AuthUserRequest")
	proto.RegisterType((*RawIRC)(nil), "api.RawIRC")
	proto.RegisterType((*ConnectionDetails)(nil), "api.ConnectionDetails")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Ext service

type ExtClient interface {
	Pipe(ctx context.Context, opts ...grpc.CallOption) (Ext_PipeClient, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Result, error)
	Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*Result, error)
	StateSelf(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SelfResponse, error)
	StateUsersByChan(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*ListResponse, error)
	StateUsersByChanCount(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*CountResponse, error)
	StateUserModes(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*ChannelModes, error)
	StateChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*ChannelResponse, error)
	StateChannels(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*ListResponse, error)
	StateChannelCount(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*CountResponse, error)
	StateIsOn(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*Result_OK, error)
	StoreAuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*Result_OK, error)
	StoreAuthedUser(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*StoredUser, error)
	StoreUser(ctx context.Context, in *Query, opts ...grpc.CallOption) (*StoredUser, error)
	StoreUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoredUsersResponse, error)
	StoreUsersByNetwork(ctx context.Context, in *Query, opts ...grpc.CallOption) (*StoredUsersResponse, error)
	StoreUsersByChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*StoredUsersResponse, error)
	StoreChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*StoredChannel, error)
	StoreChannels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoredChannelsResponse, error)
	StorePutUser(ctx context.Context, in *StoredUser, opts ...grpc.CallOption) (*Result, error)
	StorePutChannel(ctx context.Context, in *StoredChannel, opts ...grpc.CallOption) (*Result, error)
	StoreDeleteUser(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
	StoreDeleteChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*Result, error)
}

type extClient struct {
	cc *grpc.ClientConn
}

func NewExtClient(cc *grpc.ClientConn) ExtClient {
	return &extClient{cc}
}

func (c *extClient) Pipe(ctx context.Context, opts ...grpc.CallOption) (Ext_PipeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ext_serviceDesc.Streams[0], c.cc, "/api.Ext/Pipe", opts...)
	if err != nil {
		return nil, err
	}
	x := &extPipeClient{stream}
	return x, nil
}

type Ext_PipeClient interface {
	Send(*RawIRC) error
	Recv() (*IRCMessage, error)
	grpc.ClientStream
}

type extPipeClient struct {
	grpc.ClientStream
}

func (x *extPipeClient) Send(m *RawIRC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *extPipeClient) Recv() (*IRCMessage, error) {
	m := new(IRCMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *extClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Ext/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) Unregister(ctx context.Context, in *UnregisterRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Ext/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateSelf(ctx context.Context, in *Query, opts ...grpc.CallOption) (*SelfResponse, error) {
	out := new(SelfResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StateSelf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateUsersByChan(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StateUsersByChan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateUsersByChanCount(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StateUsersByChanCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateUserModes(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*ChannelModes, error) {
	out := new(ChannelModes)
	err := grpc.Invoke(ctx, "/api.Ext/StateUserModes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*ChannelResponse, error) {
	out := new(ChannelResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StateChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateChannels(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StateChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateChannelCount(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StateChannelCount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StateIsOn(ctx context.Context, in *ChannelQuery, opts ...grpc.CallOption) (*Result_OK, error) {
	out := new(Result_OK)
	err := grpc.Invoke(ctx, "/api.Ext/StateIsOn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreAuthUser(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*Result_OK, error) {
	out := new(Result_OK)
	err := grpc.Invoke(ctx, "/api.Ext/StoreAuthUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreAuthedUser(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*StoredUser, error) {
	out := new(StoredUser)
	err := grpc.Invoke(ctx, "/api.Ext/StoreAuthedUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreUser(ctx context.Context, in *Query, opts ...grpc.CallOption) (*StoredUser, error) {
	out := new(StoredUser)
	err := grpc.Invoke(ctx, "/api.Ext/StoreUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoredUsersResponse, error) {
	out := new(StoredUsersResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StoreUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreUsersByNetwork(ctx context.Context, in *Query, opts ...grpc.CallOption) (*StoredUsersResponse, error) {
	out := new(StoredUsersResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StoreUsersByNetwork", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreUsersByChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*StoredUsersResponse, error) {
	out := new(StoredUsersResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StoreUsersByChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*StoredChannel, error) {
	out := new(StoredChannel)
	err := grpc.Invoke(ctx, "/api.Ext/StoreChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreChannels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StoredChannelsResponse, error) {
	out := new(StoredChannelsResponse)
	err := grpc.Invoke(ctx, "/api.Ext/StoreChannels", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StorePutUser(ctx context.Context, in *StoredUser, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Ext/StorePutUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StorePutChannel(ctx context.Context, in *StoredChannel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Ext/StorePutChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreDeleteUser(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Ext/StoreDeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *extClient) StoreDeleteChannel(ctx context.Context, in *NetworkQuery, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/api.Ext/StoreDeleteChannel", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ext service

type ExtServer interface {
	Pipe(Ext_PipeServer) error
	Register(context.Context, *RegisterRequest) (*Result, error)
	Unregister(context.Context, *UnregisterRequest) (*Result, error)
	StateSelf(context.Context, *Query) (*SelfResponse, error)
	StateUsersByChan(context.Context, *NetworkQuery) (*ListResponse, error)
	StateUsersByChanCount(context.Context, *NetworkQuery) (*CountResponse, error)
	StateUserModes(context.Context, *ChannelQuery) (*ChannelModes, error)
	StateChannel(context.Context, *NetworkQuery) (*ChannelResponse, error)
	StateChannels(context.Context, *NetworkQuery) (*ListResponse, error)
	StateChannelCount(context.Context, *NetworkQuery) (*CountResponse, error)
	StateIsOn(context.Context, *ChannelQuery) (*Result_OK, error)
	StoreAuthUser(context.Context, *AuthUserRequest) (*Result_OK, error)
	StoreAuthedUser(context.Context, *NetworkQuery) (*StoredUser, error)
	StoreUser(context.Context, *Query) (*StoredUser, error)
	StoreUsers(context.Context, *Empty) (*StoredUsersResponse, error)
	StoreUsersByNetwork(context.Context, *Query) (*StoredUsersResponse, error)
	StoreUsersByChannel(context.Context, *NetworkQuery) (*StoredUsersResponse, error)
	StoreChannel(context.Context, *NetworkQuery) (*StoredChannel, error)
	StoreChannels(context.Context, *Empty) (*StoredChannelsResponse, error)
	StorePutUser(context.Context, *StoredUser) (*Result, error)
	StorePutChannel(context.Context, *StoredChannel) (*Result, error)
	StoreDeleteUser(context.Context, *Query) (*Result, error)
	StoreDeleteChannel(context.Context, *NetworkQuery) (*Result, error)
}

func RegisterExtServer(s *grpc.Server, srv ExtServer) {
	s.RegisterService(&_Ext_serviceDesc, srv)
}

func _Ext_Pipe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExtServer).Pipe(&extPipeServer{stream})
}

type Ext_PipeServer interface {
	Send(*IRCMessage) error
	Recv() (*RawIRC, error)
	grpc.ServerStream
}

type extPipeServer struct {
	grpc.ServerStream
}

func (x *extPipeServer) Send(m *IRCMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *extPipeServer) Recv() (*RawIRC, error) {
	m := new(RawIRC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ext_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).Unregister(ctx, req.(*UnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateSelf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateSelf(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateUsersByChan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateUsersByChan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateUsersByChan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateUsersByChan(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateUsersByChanCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateUsersByChanCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateUsersByChanCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateUsersByChanCount(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateUserModes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateUserModes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateUserModes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateUserModes(ctx, req.(*ChannelQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateChannel(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateChannels(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateChannelCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateChannelCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateChannelCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateChannelCount(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StateIsOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StateIsOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StateIsOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StateIsOn(ctx, req.(*ChannelQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreAuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreAuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreAuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreAuthUser(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreAuthedUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreAuthedUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreAuthedUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreAuthedUser(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreUser(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreUsersByNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreUsersByNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreUsersByNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreUsersByNetwork(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreUsersByChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreUsersByChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreUsersByChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreUsersByChannel(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreChannel(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreChannels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StorePutUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StorePutUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StorePutUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StorePutUser(ctx, req.(*StoredUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StorePutChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoredChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StorePutChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StorePutChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StorePutChannel(ctx, req.(*StoredChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreDeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreDeleteUser(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ext_StoreDeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtServer).StoreDeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Ext/StoreDeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtServer).StoreDeleteChannel(ctx, req.(*NetworkQuery))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ext_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Ext",
	HandlerType: (*ExtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Ext_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Ext_Unregister_Handler,
		},
		{
			MethodName: "StateSelf",
			Handler:    _Ext_StateSelf_Handler,
		},
		{
			MethodName: "StateUsersByChan",
			Handler:    _Ext_StateUsersByChan_Handler,
		},
		{
			MethodName: "StateUsersByChanCount",
			Handler:    _Ext_StateUsersByChanCount_Handler,
		},
		{
			MethodName: "StateUserModes",
			Handler:    _Ext_StateUserModes_Handler,
		},
		{
			MethodName: "StateChannel",
			Handler:    _Ext_StateChannel_Handler,
		},
		{
			MethodName: "StateChannels",
			Handler:    _Ext_StateChannels_Handler,
		},
		{
			MethodName: "StateChannelCount",
			Handler:    _Ext_StateChannelCount_Handler,
		},
		{
			MethodName: "StateIsOn",
			Handler:    _Ext_StateIsOn_Handler,
		},
		{
			MethodName: "StoreAuthUser",
			Handler:    _Ext_StoreAuthUser_Handler,
		},
		{
			MethodName: "StoreAuthedUser",
			Handler:    _Ext_StoreAuthedUser_Handler,
		},
		{
			MethodName: "StoreUser",
			Handler:    _Ext_StoreUser_Handler,
		},
		{
			MethodName: "StoreUsers",
			Handler:    _Ext_StoreUsers_Handler,
		},
		{
			MethodName: "StoreUsersByNetwork",
			Handler:    _Ext_StoreUsersByNetwork_Handler,
		},
		{
			MethodName: "StoreUsersByChannel",
			Handler:    _Ext_StoreUsersByChannel_Handler,
		},
		{
			MethodName: "StoreChannel",
			Handler:    _Ext_StoreChannel_Handler,
		},
		{
			MethodName: "StoreChannels",
			Handler:    _Ext_StoreChannels_Handler,
		},
		{
			MethodName: "StorePutUser",
			Handler:    _Ext_StorePutUser_Handler,
		},
		{
			MethodName: "StorePutChannel",
			Handler:    _Ext_StorePutChannel_Handler,
		},
		{
			MethodName: "StoreDeleteUser",
			Handler:    _Ext_StoreDeleteUser_Handler,
		},
		{
			MethodName: "StoreDeleteChannel",
			Handler:    _Ext_StoreDeleteChannel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Pipe",
			Handler:       _Ext_Pipe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor1,
}

// Client API for Boomerang service

type BoomerangClient interface {
	Connect(ctx context.Context, in *ConnectionDetails, opts ...grpc.CallOption) (*Result_OK, error)
}

type boomerangClient struct {
	cc *grpc.ClientConn
}

func NewBoomerangClient(cc *grpc.ClientConn) BoomerangClient {
	return &boomerangClient{cc}
}

func (c *boomerangClient) Connect(ctx context.Context, in *ConnectionDetails, opts ...grpc.CallOption) (*Result_OK, error) {
	out := new(Result_OK)
	err := grpc.Invoke(ctx, "/api.Boomerang/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Boomerang service

type BoomerangServer interface {
	Connect(context.Context, *ConnectionDetails) (*Result_OK, error)
}

func RegisterBoomerangServer(s *grpc.Server, srv BoomerangServer) {
	s.RegisterService(&_Boomerang_serviceDesc, srv)
}

func _Boomerang_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoomerangServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Boomerang/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoomerangServer).Connect(ctx, req.(*ConnectionDetails))
	}
	return interceptor(ctx, in, info, handler)
}

var _Boomerang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.Boomerang",
	HandlerType: (*BoomerangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Boomerang_Connect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor1,
}

func init() { proto.RegisterFile("ultimateq.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 1316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0xeb, 0x6e, 0x1b, 0x45,
	0x14, 0xae, 0xe3, 0x4b, 0xec, 0x63, 0xa7, 0xae, 0x87, 0x50, 0xad, 0xdc, 0x16, 0xc2, 0xa2, 0xaa,
	0x16, 0x02, 0x8b, 0xa6, 0x2d, 0x84, 0xb6, 0xaa, 0x44, 0xd2, 0xa0, 0x44, 0xbd, 0x32, 0x51, 0x11,
	0x3f, 0x90, 0xa2, 0xc1, 0x3b, 0x71, 0x56, 0xd9, 0x9d, 0xd9, 0xcc, 0xcc, 0x36, 0x8d, 0xf8, 0xc1,
	0x53, 0xf0, 0x16, 0xbc, 0x0a, 0x2f, 0xc0, 0xd3, 0xa0, 0xb9, 0xec, 0xee, 0xf8, 0x92, 0x84, 0xfe,
	0x9b, 0x73, 0xbe, 0x73, 0xdb, 0x73, 0x99, 0x33, 0x0b, 0xfd, 0x3c, 0x51, 0x71, 0x4a, 0x14, 0x3d,
	0x1d, 0x67, 0x82, 0x2b, 0x8e, 0xea, 0x24, 0x8b, 0x87, 0x10, 0x11, 0x45, 0x2c, 0x23, 0xfc, 0x0d,
	0x7a, 0x07, 0x34, 0x39, 0xc2, 0x54, 0x66, 0x9c, 0x49, 0x8a, 0xbe, 0x84, 0x46, 0x2e, 0xa9, 0x08,
	0x6a, 0x1b, 0xb5, 0x51, 0x77, 0xb3, 0x3f, 0x26, 0x59, 0x3c, 0x3e, 0x88, 0xd3, 0x2c, 0xa1, 0xef,
	0x24, 0x15, 0xd8, 0x80, 0xe8, 0x1e, 0x34, 0x53, 0x1e, 0x51, 0x19, 0xac, 0x18, 0xa9, 0x81, 0x91,
	0xda, 0x39, 0x26, 0x8c, 0xd1, 0xe4, 0x95, 0x06, 0xb0, 0xc5, 0xc3, 0x55, 0x68, 0xee, 0xa6, 0x99,
	0x3a, 0x0f, 0xef, 0x40, 0xf3, 0xe7, 0x9c, 0x8a, 0x73, 0xb4, 0x0e, 0xcd, 0x53, 0x7d, 0x30, 0x0e,
	0x3a, 0xd8, 0x12, 0xe1, 0x33, 0xe8, 0xbd, 0xa6, 0xea, 0x8c, 0x8b, 0x13, 0x2b, 0x15, 0xc0, 0x2a,
	0xb3, 0xb4, 0x93, 0x2b, 0xc8, 0x4a, 0x7f, 0xc5, 0xd7, 0xff, 0x15, 0x7a, 0xce, 0xfd, 0x55, 0xfa,
	0x01, 0xac, 0x4e, 0xac, 0xa4, 0xb3, 0x50, 0x90, 0x95, 0xe5, 0xba, 0x6f, 0x39, 0x84, 0xde, 0xcb,
	0x58, 0xaa, 0x32, 0x3f, 0x08, 0x1a, 0x49, 0x2c, 0x55, 0x50, 0xdb, 0xa8, 0x8f, 0x3a, 0xd8, 0x9c,
	0xc3, 0xbb, 0xb0, 0xb6, 0xc3, 0x73, 0x56, 0x09, 0xad, 0x43, 0x73, 0xa2, 0x19, 0xc6, 0x79, 0x13,
	0x5b, 0x22, 0xfc, 0x03, 0x5a, 0x98, 0xca, 0x3c, 0x51, 0x68, 0x03, 0x56, 0xf8, 0x89, 0x4b, 0xf1,
	0x75, 0x93, 0x3c, 0x0b, 0x8c, 0xdf, 0xbc, 0xd8, 0xbb, 0x86, 0x57, 0xf8, 0x09, 0x7a, 0x00, 0x1d,
	0xc6, 0xd5, 0xe1, 0x11, 0xcf, 0x59, 0xe4, 0xb2, 0xbc, 0xee, 0x0b, 0xbe, 0xe6, 0xea, 0x27, 0x8d,
	0xed, 0x5d, 0xc3, 0x6d, 0xe6, 0xce, 0xc3, 0x06, 0xac, 0xbc, 0x79, 0x31, 0x04, 0x68, 0x17, 0xe8,
	0x76, 0x1b, 0x5a, 0xc2, 0x28, 0x84, 0xa7, 0xd0, 0xc7, 0x74, 0x1a, 0x4b, 0x45, 0x05, 0xa6, 0xa7,
	0x39, 0x95, 0x4a, 0x7f, 0x0a, 0x23, 0x29, 0x75, 0x19, 0x32, 0x67, 0x34, 0x82, 0xf6, 0x31, 0x61,
	0x51, 0x42, 0x85, 0x2e, 0x6e, 0x7d, 0xd4, 0xdd, 0xec, 0x19, 0xb7, 0x7b, 0x96, 0x89, 0x4b, 0x14,
	0x6d, 0x40, 0x63, 0x92, 0x46, 0x32, 0xa8, 0x7b, 0x52, 0x3b, 0x3c, 0x4d, 0x09, 0x8b, 0xb0, 0x41,
	0xc2, 0x7b, 0x30, 0x78, 0xc7, 0xc4, 0xd5, 0x4e, 0xc3, 0x07, 0xd0, 0x33, 0xcd, 0xe5, 0xf5, 0xa0,
	0xa4, 0xc9, 0xd1, 0x85, 0x3d, 0xa8, 0xc1, 0xf0, 0x29, 0x0c, 0x34, 0x65, 0xdb, 0xad, 0xd0, 0x2c,
	0x1b, 0xb3, 0x76, 0x45, 0x63, 0x46, 0xd0, 0x77, 0x6c, 0xbf, 0xb2, 0x0b, 0xe9, 0x58, 0x87, 0xa6,
	0xe2, 0x59, 0x3c, 0x29, 0xba, 0xcd, 0x10, 0x95, 0x97, 0xfa, 0x15, 0x5e, 0x9e, 0xc2, 0x27, 0x07,
	0x8a, 0x0b, 0x1a, 0xe9, 0x48, 0xab, 0x28, 0xef, 0x42, 0x53, 0x8f, 0x91, 0x34, 0x4d, 0x54, 0x7e,
	0x60, 0x29, 0x88, 0x2d, 0x1a, 0xee, 0xc1, 0x4d, 0xcb, 0x74, 0xa6, 0x2b, 0x03, 0x63, 0x68, 0xbb,
	0xae, 0x2d, 0x6c, 0x20, 0xcf, 0x46, 0xf1, 0x61, 0xa5, 0x4c, 0xf8, 0x77, 0x0d, 0xd6, 0x5e, 0xf2,
	0x29, 0xcf, 0x55, 0x51, 0x86, 0xc7, 0xd0, 0x39, 0xe6, 0x52, 0x1d, 0x7a, 0xb3, 0x7e, 0xcb, 0x98,
	0x98, 0x11, 0x1b, 0xef, 0x71, 0xa9, 0x74, 0x48, 0xba, 0xcd, 0x8e, 0xdd, 0x19, 0xdd, 0x86, 0xb6,
	0x56, 0x33, 0xc9, 0x32, 0x79, 0xd1, 0x68, 0xc1, 0x19, 0x6e, 0x41, 0xbb, 0xd0, 0xba, 0x64, 0x0c,
	0x11, 0x34, 0xb4, 0x3d, 0x97, 0x57, 0x73, 0xde, 0x5e, 0x75, 0x03, 0x18, 0xfe, 0x09, 0xb0, 0x8f,
	0x77, 0x5e, 0x51, 0x29, 0xc9, 0x74, 0x79, 0x5d, 0x6e, 0x42, 0x4b, 0x52, 0x16, 0x51, 0xe1, 0x0c,
	0x38, 0x4a, 0xcb, 0x12, 0x31, 0xb5, 0x4d, 0xd9, 0xc1, 0xe6, 0xac, 0x79, 0x11, 0x51, 0x34, 0x68,
	0x6c, 0xd4, 0x46, 0x75, 0x6c, 0xce, 0xe8, 0x0e, 0x80, 0x8b, 0xe4, 0x30, 0x8e, 0x82, 0xa6, 0xb1,
	0xd1, 0x71, 0x9c, 0xfd, 0x28, 0xfc, 0xb7, 0x01, 0x5d, 0x77, 0x1f, 0xed, 0xb3, 0x23, 0x8e, 0x3e,
	0x87, 0xae, 0xa4, 0xe2, 0x3d, 0x15, 0x87, 0x5e, 0x24, 0x60, 0x59, 0xaf, 0x75, 0x3c, 0x5f, 0x40,
	0x2f, 0x16, 0x93, 0xe8, 0xf0, 0x3d, 0x15, 0x32, 0xe6, 0xcc, 0x45, 0xd5, 0xd5, 0xbc, 0x5f, 0x2c,
	0x0b, 0xdd, 0x86, 0x8e, 0xce, 0x51, 0xd5, 0x38, 0x1d, 0x5c, 0x31, 0xd0, 0x67, 0x00, 0x89, 0x2e,
	0x97, 0x85, 0x1b, 0xd6, 0x41, 0xc5, 0x41, 0x37, 0xa0, 0x2e, 0x8e, 0x26, 0x2e, 0x52, 0x7d, 0xd4,
	0x9f, 0xa5, 0xcd, 0x07, 0x2d, 0x9b, 0x16, 0x7d, 0x46, 0x1b, 0xd0, 0x9d, 0x10, 0x49, 0x53, 0x92,
	0x65, 0x31, 0x9b, 0x06, 0xab, 0x36, 0x0a, 0x8f, 0xa5, 0x13, 0x97, 0x09, 0x7a, 0x14, 0x7f, 0x08,
	0xda, 0x36, 0x71, 0x96, 0xd2, 0xd1, 0x69, 0x67, 0xea, 0x3c, 0xa3, 0x32, 0xe8, 0xd8, 0xe8, 0x4a,
	0x46, 0x81, 0xda, 0xe0, 0xa0, 0x42, 0x6d, 0x6c, 0x0e, 0x4d, 0xe2, 0x34, 0x56, 0x41, 0xd7, 0xdc,
	0x78, 0x15, 0x43, 0x7f, 0x99, 0xeb, 0xc3, 0x84, 0xb2, 0xa0, 0x67, 0x60, 0x8f, 0x63, 0x7a, 0x24,
	0x9e, 0x9c, 0x68, 0x70, 0xcd, 0x80, 0x05, 0x89, 0x86, 0xd0, 0x36, 0xf3, 0xa6, 0xa1, 0xeb, 0x06,
	0x2a, 0x69, 0xad, 0x45, 0xce, 0xc8, 0xb9, 0x86, 0xfa, 0x56, 0xcb, 0x91, 0x1a, 0x39, 0x71, 0xf6,
	0x6e, 0x58, 0xc4, 0x91, 0x7a, 0x98, 0xed, 0x17, 0x0c, 0xec, 0xad, 0x6c, 0xa3, 0x7f, 0x08, 0x2d,
	0xfa, 0x41, 0x09, 0x22, 0x03, 0x64, 0x26, 0xe9, 0xb6, 0x19, 0x03, 0xaf, 0xfa, 0xe3, 0x5d, 0x03,
	0xef, 0x32, 0x25, 0xce, 0xb1, 0x93, 0x1d, 0xfe, 0x00, 0x5d, 0x8f, 0xad, 0xcb, 0x73, 0x42, 0x8b,
	0x9d, 0xa6, 0x8f, 0xda, 0xd9, 0x7b, 0x92, 0xe4, 0xb4, 0xb8, 0x39, 0x0c, 0xf1, 0x78, 0x65, 0xab,
	0x16, 0xfe, 0x55, 0x83, 0xfe, 0x8f, 0xb9, 0x3a, 0xb6, 0x57, 0x9e, 0x1d, 0xc7, 0x8f, 0x1a, 0x14,
	0x9d, 0x98, 0x72, 0x00, 0x6d, 0x27, 0x95, 0xb4, 0xc6, 0x32, 0x22, 0xe5, 0x19, 0x17, 0x91, 0x6b,
	0xa3, 0x92, 0xd6, 0x85, 0xca, 0xa8, 0x48, 0x09, 0xa3, 0x4c, 0x99, 0x56, 0x6a, 0xe3, 0x8a, 0x11,
	0x0e, 0xa1, 0x85, 0xc9, 0xd9, 0x3e, 0xde, 0xd1, 0x5f, 0x93, 0xca, 0xa9, 0x89, 0xa4, 0x87, 0xf5,
	0x31, 0x7c, 0x02, 0x83, 0x1d, 0xce, 0x18, 0x9d, 0xa8, 0x98, 0xb3, 0xe7, 0x54, 0x91, 0x38, 0x91,
	0x65, 0x68, 0x35, 0x2f, 0x34, 0x04, 0x8d, 0x8c, 0x0b, 0x1b, 0x6e, 0x13, 0x9b, 0xf3, 0xe6, 0x3f,
	0x1d, 0xa8, 0xef, 0x7e, 0x50, 0x68, 0x04, 0x8d, 0xb7, 0x71, 0x46, 0x51, 0xd7, 0x2e, 0x32, 0xe3,
	0x6b, 0x68, 0x2f, 0xbf, 0x6a, 0xdc, 0x47, 0xb5, 0x6f, 0x6b, 0xe8, 0x1b, 0x68, 0x17, 0xcb, 0x0a,
	0x15, 0x6b, 0x6f, 0x66, 0x8d, 0x0c, 0xbb, 0xde, 0x32, 0x44, 0xf7, 0x01, 0xaa, 0x45, 0x83, 0x6e,
	0x1a, 0x68, 0x61, 0xf3, 0xcc, 0xaa, 0x7c, 0x05, 0x9d, 0x03, 0x45, 0x14, 0xd5, 0x6f, 0x1f, 0x04,
	0x06, 0x31, 0x2f, 0x87, 0xa1, 0xbd, 0xcc, 0x67, 0x9e, 0x44, 0x5b, 0x70, 0xc3, 0xc8, 0x9a, 0x4b,
	0x7c, 0xfb, 0x5c, 0x5f, 0xaf, 0x68, 0xe0, 0x77, 0x89, 0xaf, 0x39, 0xf3, 0x58, 0x78, 0x06, 0x9f,
	0xce, 0x6b, 0x9a, 0x87, 0xc2, 0x32, 0x75, 0xe4, 0x36, 0xa8, 0xff, 0x8e, 0xf8, 0x0e, 0xae, 0x97,
	0xfa, 0x66, 0xb1, 0xa0, 0x99, 0x5d, 0xe3, 0xfb, 0xf5, 0xd7, 0x0f, 0xfa, 0x1e, 0x7a, 0x46, 0xcf,
	0x31, 0x97, 0xb9, 0x5b, 0xf7, 0xb5, 0x4a, 0x87, 0x8f, 0x60, 0xcd, 0x57, 0x94, 0xff, 0xf3, 0x3b,
	0x1f, 0xc3, 0xc0, 0x57, 0xfb, 0xa8, 0x6f, 0x1c, 0xbb, 0x4a, 0xec, 0xcb, 0x37, 0x6c, 0xd9, 0xe7,
	0xcd, 0xbd, 0x8f, 0x6c, 0x88, 0x5c, 0xd0, 0x62, 0x84, 0x5c, 0x83, 0xcc, 0x4d, 0xd4, 0x12, 0xb5,
	0x7e, 0xa9, 0x66, 0xd7, 0xec, 0xb2, 0x00, 0xe7, 0x57, 0x31, 0x1a, 0xe9, 0xe8, 0xb8, 0x30, 0x15,
	0x98, 0xe9, 0x93, 0x05, 0xc9, 0x4d, 0x80, 0x52, 0x52, 0x3a, 0x51, 0xf3, 0xf6, 0x1d, 0x06, 0x73,
	0xa2, 0xd5, 0x1e, 0x7f, 0xe2, 0xde, 0x07, 0xae, 0x3f, 0x5c, 0x28, 0x33, 0x7e, 0x2e, 0x56, 0xde,
	0x9e, 0x55, 0xbe, 0xa4, 0xd6, 0x17, 0xdb, 0x78, 0xa4, 0x1b, 0x85, 0x8b, 0xcb, 0x1a, 0x65, 0xc9,
	0xcb, 0x02, 0x6d, 0xb9, 0x1a, 0x94, 0x6d, 0xe2, 0x7f, 0xee, 0xad, 0x45, 0x85, 0xca, 0xe1, 0xd7,
	0xce, 0xe1, 0xdb, 0xdc, 0xbe, 0x10, 0xe6, 0xd3, 0x38, 0x3b, 0xa5, 0x9b, 0xae, 0x68, 0x6f, 0x73,
	0x55, 0xb8, 0x5e, 0x12, 0xce, 0xfc, 0x64, 0x5b, 0x9d, 0xe7, 0x34, 0xa1, 0x6a, 0xb1, 0x6e, 0x33,
	0xb2, 0x0f, 0x01, 0x79, 0xb2, 0x97, 0x24, 0xc1, 0xd7, 0xda, 0x7c, 0x06, 0x9d, 0x6d, 0xce, 0x53,
	0x2a, 0x08, 0x9b, 0xa2, 0xfb, 0xb0, 0xea, 0x6e, 0x46, 0x77, 0xf1, 0x2c, 0xdc, 0x93, 0xf3, 0xad,
	0xf8, 0x7b, 0xcb, 0xfc, 0x79, 0x3d, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x01, 0xab, 0xa9, 0x68,
	0x9d, 0x0d, 0x00, 0x00,
}
