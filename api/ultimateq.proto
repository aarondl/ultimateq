syntax = "proto3";

import "data.proto";

package api;

message SelfResponse {
  SimpleUser   user  = 1;
  ChannelModes modes = 2;
}

message Empty {
}

message Result {
  bool ok = 1;
}

message Query {
  string query = 1;
}

message NetworkQuery {
  string network = 1;
  string query   = 2;
}

message ChannelQuery {
  string network = 1;
  string channel = 2;
  string query   = 3;
}

message ListResponse {
  repeated string list = 1;
}

message CountResponse {
  int32 count = 1;
}

message RegisterRequest {
  string ext     = 1;
  string network = 2;
  string channel = 3;
  string event   = 4;
}

message RegisterResponse {
  uint64 id = 1;
}

message UnregisterRequest {
  string ext = 1;
  uint64 id  = 2;
}

message RegisterCmdRequest {
  string  ext     = 1;
  string  network = 2;
  string  channel = 3;
  Cmd     cmd     = 4;
}

message UnregisterCmdRequest {
  string ext     = 1;
  string network = 2;
  string channel = 3;
  string command = 4;
}

message UnregisterAllRequest {
  string ext = 1;
}

message UserResponse {
  SimpleUser self = 1;
}

message UserModesResponse {
  ChannelModes modes = 1;
}

message ChannelResponse {
  string       name  = 1;
  string       topic = 2;
  ChannelModes modes = 3;
}

message StoredUsersResponse {
  repeated StoredUser users = 1;
}

message StoredChannelsResponse {
  repeated StoredChannel channels = 1;
}

message LogoutRequest {
  message HostUser {
    string network = 1;
    string host    = 2;
  }
  oneof query {
    HostUser host_user = 1;
    string   username  = 2;
  }
}

message IRCMessage {
  string name          = 1;
  string sender        = 2;
  repeated string args = 3;
  int64 date           = 4;
  string network_id    = 5;
}

message NetworkInfo {
  string server_name  = 1;
  string ircd_version = 2;
  string usermodes    = 3;
  string lchanmodes   = 4;

  string rfc         = 5;
  string ircd        = 6;
  string casemapping = 7;
  string prefix      = 8;
  string chantypes   = 9;
  string chanmodes   = 10;
  int32 chanlimit    = 11;
  int32 channellen   = 12;
  int32 nicklen      = 13;
  int32 topiclen     = 14;
  int32 awaylen      = 15;
  int32 kicklen      = 16;
  int32 modes        = 17;

  map<string,string> extras = 18;
}

message AuthUserRequest {
  string network  = 1;
  string host     = 2;
  string username = 3;
  string password = 4;
  bool permanent  = 5;
}

message RawIRC {
  bytes msg = 1;
}

service Ext {
  rpc Pipe(stream RawIRC) returns (stream IRCMessage);

  rpc Ping(Empty) returns (Empty);

  rpc Register(RegisterRequest) returns (RegisterResponse);
  rpc RegisterCmd(RegisterCmdRequest) returns (Empty);
  rpc Unregister(UnregisterRequest) returns (Empty);
  rpc UnregisterCmd(UnregisterCmdRequest) returns (Empty);
  rpc UnregisterAll(UnregisterAllRequest) returns (Empty);

  rpc StateSelf(Query) returns (SelfResponse);
  rpc StateUser(NetworkQuery) returns (SimpleUser);
  rpc StateUsersByChan(NetworkQuery) returns (ListResponse);
  rpc StateUsersByChanCount(NetworkQuery) returns (CountResponse);
  rpc StateUserModes(ChannelQuery) returns (UserModes);

  rpc StateChannel(NetworkQuery) returns (ChannelResponse);
  rpc StateChannels(Query) returns (ListResponse);
  rpc StateChannelCount(Query) returns (CountResponse);

  rpc StateIsOn(ChannelQuery) returns (Result);

  rpc StoreAuthUser(AuthUserRequest) returns (Empty);
  rpc StoreAuthedUser(NetworkQuery) returns (StoredUser);
  rpc StoreUser(Query) returns (StoredUser);

  rpc StoreUsers(Empty) returns (StoredUsersResponse);
  rpc StoreUsersByNetwork(Query) returns (StoredUsersResponse);
  rpc StoreUsersByChannel(NetworkQuery) returns (StoredUsersResponse);

  rpc StoreChannel(NetworkQuery) returns (StoredChannel);
  rpc StoreChannels(Empty) returns (StoredChannelsResponse);

  rpc StorePutUser(StoredUser) returns (Empty);
  rpc StorePutChannel(StoredChannel) returns (Empty);

  rpc StoreDeleteUser(Query) returns (Empty);
  rpc StoreDeleteChannel(NetworkQuery) returns (Empty);

  rpc StoreLogout(NetworkQuery) returns (Empty);
  rpc StoreLogoutByUser(Query) returns (Empty);
}

message ConnectionDetails {
  string host = 1;
  int32  port = 2;
}

service Boomerang {
  rpc Connect(ConnectionDetails) returns (Empty);
}
