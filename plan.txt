//
// All requests must have a header "Auth" which carries an empty JWT token
//

PUT /api/v1/register
  {
    name: "myext",
    handlers: [
      {
        network: "something", // Optional
        channel: "something", // Optional
        event: "001",
      },
    ],
    commands: [
      {
        network: "something", // Optional
        channel: "something", // Optional
        cmd: {
          name: "cmd",
          extension: "name",
          description: "description",
          kind: 1,
          scope: 1,
          args: ["arg", "two"],
          require_auth: true,
          req_level: 5,
          req_flags: "ab"
        }
      }
    ],
  }

  Response:
  200 OK

/////////////////////////////////////////

PUT /api/v1/unregister
  {
    name: "myext"
  }

Response:
200 OK

/////////////////////////////////////////
State:
/////////////////////////////////////////

GET /api/v1/net/{network}/state/self
  {
    "user": { "host": "who!who@who.com", "name": "Who Bot" },
    "modes": CHANNELMODES
  }

GET /api/v1/net/{network}/state/user/{user}
  Response: 200 404 { "host": "fish!fish@fish.com", "name": "Dylan Johnstoner" }
GET /api/v1/net/{network}/state/users?channel="#channel"
  Response: 200 404 [ "fish!fish@fish.com", "cm!cm@cm.com" ]
GET /api/v1/net/{network}/state/users/count?channel="#channel"
  Response: 200 404 { "count": N }

GET /api/v1/net/{network}/state/user_modes/{channel}/{nick_or_host}
  Response: 200 404
  CHANNELMODES

GET /api/v1/net/{network}/state/channel/{channel}
  Response: 200 404
  {
    "name": "#deviate",
    "topic": "meetup at cm's house whatever... just show up and say hello!"
    "modes": {
      "arg_modes": {
        "l": "5",
        "k": "password"
      },
      "address_modes": {
        "b": ["fish*", "cm*"],
      },
    }
  }
GET /api/v1/net/{network}/state/channels?user="fish"
  Response: 200 ["#deviate", "#bots"]
GET /api/v1/net/{network}/state/channels/count?user="fish"
  Response: 200 404 { "count": N }

GET /api/v1/net/{network}/state/is_on/{channel}/{nick_or_host}
  Response: 200 404

CHANNELMODES:
{
  "modes": N,
  "kinds": {
    "user_prefixs": [
      { "symbol": "@", "char": "o" },
    ]
    "channel_modes": {
      "l": 2,
      "b": 4,
    }
  }
}

/////////////////////////////////////////
Store:
/////////////////////////////////////////

PUT /api/v1/auth_user
  {
    "network": "irc.zkpq.ca",
    "host": "fish!fish@fish.com",
    "username": "username",
    "password": "bcrypt",
    "permanent": true
  }
  Response: 200 / 401

GET /api/v1/store/net/{network}/authed_user/{host}
  Response: 200 / 404
  STOREDUSER

GET /api/v1/store/user/{username}
  Response: 200 / 404
  STOREDUSER

GET /api/v1/store/users
  Response: 200
  [ STOREDUSER ]

GET /api/v1/store/net/{network}/users
  Response: 200 / 404
  [ STOREDUSER ]

GET /api/v1/store/net/{network}/channel/{channel}/users
  Response: 200 / 404
  [ STOREDUSER ]

GET /api/v1/store/net/{network}/channel/{channel}
  Response: 200 / 404
  STOREDCHANNEL

GET /api/v1/store/channels
  Response: 200
  [ STOREDCHANNEL ]

PUT /api/v1/store/user
  STOREDUSER
  Response: 200 500
  { "error": "description" }

PUT /api/v1/store/channel
  STOREDCHANNEL
  Response: 200 500
  { "error": "description" }

DELETE /api/v1/store/user/{username}
  Response: 200 404

DELETE /api/v1/store/net/{network}/channel/{channel}
  Response: 200 404

// Username OR Net+Host
DELETE /api/v1/logout?network={network}&host={host}&username={username}
  Response: 200 404

STOREDUSER:
{
  "username": "stuff",
  "password": "bcrypt",
  "masks": ["*!*@fish.com"],
  "access": {
    "irc.zkpq.ca:#deviate": ACCESS
  }
  "data": {
    Arbitrary Key Value Data store string -> string
  }
}

STOREDCHANNEL:
{
  "network": "irc.zkpq.ca",
  "name": "#deviate",
  "data": {
    Arbitrary Key Value Data store string -> string
  }
}

ACCESS:
{
  "level": 10,
  "flags": "weEdpants",
}
